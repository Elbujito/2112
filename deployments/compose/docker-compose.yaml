services:
  app-service:
    build:
      context: ../../.
      dockerfile: deployments/docker/Dockerfile.app
    container_name: app-service
    env_file: ../config/app-service-env
    ports:
      - "8081:8081"
      - "8080:8080"
      - "8079:8079"
    depends_on:
      # db-seeder:
      #   condition: service_completed_successfully
      - propagator-service
      - redis-service
    restart: always
    command: ["service", "start"]

  propagator-service:
    build:
      context: ../../.
      dockerfile: deployments/docker/Dockerfile.propagator
    container_name: propagator-service
    env_file: ../config/propagator-service-env
    ports:
      - "5000:5000"
    depends_on:
      - redis-service
    restart: always

  gateway-service:
    build:
      context: ../../.
      dockerfile: deployments/docker/Dockerfile.gateway
    container_name: gateway-service
    env_file: ../config/gateway-service-env
    ports:
      - "4000:4000"
    depends_on:
      - propagator-service
      - redis-service
    restart: always

  redis-service:
    build:
      context: ../../.
      dockerfile: deployments/docker/Dockerfile.redis
    container_name: redis-service
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: always

  # PostgreSQL Database
  postgres-db:
    extends:
      file: ./postgres.yaml
      service: postgres-db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      retries: 5
      start_period: 30s

  # Database Migration Service
  db-migrator:
    build:
      context: ../../.
      dockerfile: deployments/docker/Dockerfile.app
    container_name: db-migrator
    env_file: ../config/app.dev-env
    command: ["service","db", "migrate"] # Run migration
    depends_on:
      postgres-db:
        condition: service_healthy
    restart: "no" # Run once and exit

  # Database Seeding Service
  db-seeder:
    build:
      context: ../../.
      dockerfile: deployments/docker/Dockerfile.app
    container_name: db-seeder
    env_file: ../config/postgres.dev-env
    command: ["service","db", "seed"] # Run seeding
    depends_on:
      db-migrator:
        condition: service_completed_successfully
    restart: "no" # Run once and exit

volumes:
  redis-data:
