schema {
  query: Query
  subscription: Subscription
}

type Query {
  # Retrieve the position of a satellite by ID
  satellitePosition(id: ID!): SatellitePosition

  # Retrieve the TLE data of a satellite by ID
  satelliteTle(id: ID!): SatelliteTle

  # Retrieve positions of a satellite within a time range
  satellitePositionsInRange(id: ID!, startTime: String!, endTime: String!): [SatellitePosition!]!

  # Trigger the generation of visibility data (AOS and LOS) for satellites within a time range
  requestSatelliteVisibilitiesInRange(
    latitude: Float!, 
    longitude: Float!, 
    startTime: String!, 
    endTime: String!
  ): Boolean!
}

type SatellitePosition {
  id: ID!
  name: String!
  latitude: Float!
  longitude: Float!
  altitude: Float!
  timestamp: String! # ISO 8601 format
}

type SatelliteTle {
  id: ID!
  name: String!
  tleLine1: String!
  tleLine2: String!
}

type TileVisibility {
  tileId: ID!
  quadkey: String!
  satelliteId: ID!
  satelliteName: String!
  aos: String! # Acquisition of Signal (ISO 8601 format)
  los: String! # Loss of Signal (ISO 8601 format)
}

type Subscription {
  # Real-time position updates
  satellitePositionUpdated(id: ID!): SatellitePosition

  # Real-time updates for visibilities after a request
  satelliteVisibilityUpdated(
    latitude: Float!, 
    longitude: Float!, 
    startTime: String!, 
    endTime: String!
  ): [TileVisibility!]!
}
